using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[RequireComponent(typeof(LineRenderer))]
public class raycastReflection : MonoBehaviour
{
    public int reflections;
    public float maxLength;

    private LineRenderer lineRenderer;
    private Ray ray;
    private RaycastHit hit;
    private Vector3 direction;

    private void Awake()
    {
        lineRenderer = GetComponent<LineRenderer>();

    }

    private void Update()
    {
        ray = new Ray(gameObject.transform.position, gameObject.transform.right);

        lineRenderer.positionCount = 1;
        lineRenderer.SetPosition(0, gameObject.transform.position);
        float remainingLength = maxLength;

        for (int i = 0; i < reflections; i++)
        {
            if (Physics.Raycast(ray.origin, ray.direction, out hit, remainingLength))
            {
                lineRenderer.positionCount += 1;
                lineRenderer.SetPosition(lineRenderer.positionCount - 1, hit.point);
                remainingLength -= Vector3.Distance(ray.origin, hit.point);
                if (hit.collider.tag == "Mirror")
                {
                    ray = new Ray(hit.point, Vector3.Reflect(ray.direction, hit.normal));
                }
                if (hit.collider.tag == "Glass")
                {
                    Vector3 dis = Refract(1.0f, 2.0f, hit.normal, ray.direction);
                    //ray = new Ray(hit.point, Vector3.Reflect(ray.direction, hit.normal));
                    ray = new Ray(hit.point, dis);
                }
            } 
            else 
            {
                lineRenderer.positionCount += 1;
                lineRenderer.SetPosition(lineRenderer.positionCount - 1, ray.origin + ray.direction * remainingLength);
            }
        }
    }
    public static Vector3 Refract(float RI1, float RI2, Vector3 v1, Vector3 v2)
    {
        Vector3 surfNorm = v1.normalized;
        Vector3 incident = v2.normalized;
        Vector3 ans;


        return (RI1 / RI2 * Vector3.Cross(surfNorm, Vector3.Cross(-surfNorm, incident)) - surfNorm * Mathf.Sqrt(1 - Vector3.Dot(Vector3.Cross(surfNorm, incident) * (RI1 / RI2 * RI1 / RI2), Vector3.Cross(surfNorm, incident)))).normalized;
    }

}
